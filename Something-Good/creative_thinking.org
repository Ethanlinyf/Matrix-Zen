#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: creative_thinking
#+date: <2022-09-26 Mon>
#+author: Ethan YF Lin
#+email: e.yflin@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.0.50 (Org mode 9.5.4)
#+cite_export:

This is for the creative thinking to facilitate the creation and
implementation in this Matrix-Zen Park. 


* Project
** The Fibonacci numbers
- What is Fibonacci Sequence? \\
  The *Fibonacci sequence*, also known as Fibonacci numbers with 0 and
  1 as the first two numbers, is a sequence of numbers and each
  following number from the third one is equal to the sum of two
  numbers before it.
- The significance of Fibonacci sequence
  The ratio of two successive Fibonacci numbers is infinitely close to the Golden ratio value.
- practical problems \\
  + Write down the list of the first 10 Fibonacci numbers.
  + Find the Fibonacci number when n = 4, using the recursive formula.
  + Find the next three terms of the sequence 15, 23, 38, 61, …
  + Find the next three terms of the sequence 3x, 3x + y, 6x + y, 9x + 2y, …
  + What is the value of the Golden ratio? 1.618034...
- How to calculate:
  + Iteration \\
    Fn = Fn-1+Fn-2
  + base on Golden Ratio \\
    
    With the help of Golden Ratio, we can find the Fibonacci numbers in the sequence.

    The formula to calculate the Fibonacci numbers using the Golden Ratio is:

    Xn = [φn – (1-φ)n]/√5

    Where,

    φ is the Golden Ratio, which is approximately equal to the value of 1.618

    n is the nth term of the Fibonacci sequence.
- Makes a spiral
  #+begin_src python

    # Python program for Plotting Fibonacci
    # spiral fractal using Turtle
    import turtle
    import math
 
    def fiboPlot(n):
        a = 0
        b = 1
        square_a = a
        square_b = b
 
        # Setting the colour of the plotting pen to blue
        x.pencolor("blue")
 
        # Drawing the first square
        x.forward(b * factor)
        x.left(90)
        x.forward(b * factor)
        x.left(90)
        x.forward(b * factor)
        x.left(90)
        x.forward(b * factor)
 
        # Proceeding in the Fibonacci Series
        temp = square_b
        square_b = square_b + square_a
        square_a = temp
     
        # Drawing the rest of the squares
        for i in range(1, n):
            x.backward(square_a * factor)
            x.right(90)
            x.forward(square_b * factor)
            x.left(90)
            x.forward(square_b * factor)
            x.left(90)
            x.forward(square_b * factor)
 
            # Proceeding in the Fibonacci Series
            temp = square_b
            square_b = square_b + square_a
            square_a = temp
 
        # Bringing the pen to starting point of the spiral plot
        x.penup()
        x.setposition(factor, 0)
        x.seth(0)
        x.pendown()
     
        # Setting the colour of the plotting pen to red
        x.pencolor("red")
 
        # Fibonacci Spiral Plot
        x.left(90)
        for i in range(n):
            print(b)
            fdwd = math.pi * b * factor / 2
            fdwd /= 90
            for j in range(90):
                x.forward(fdwd)
                x.left(1)
            temp = a
            a = b
            b = temp + b
 
 
    # Here 'factor' signifies the multiplicative
    # factor which expands or shrinks the scale
    # of the plot by a certain factor.
    factor = 1
 
    # Taking Input for the number of
    # Iterations our Algorithm will run
    n = int(input('Enter the number of iterations (must be > 1): '))
 
    # Plotting the Fibonacci Spiral Fractal
    # and printing the corresponding Fibonacci Number
    if n > 0:
        print("Fibonacci series for", n, "elements :")
        x = turtle.Turtle()
        x.speed(100)
        fiboPlot(n)
        turtle.done()
    else:
        print("Number of iterations must be > 0")
  #+end_src

* Learning Data Structure and Algorithm
** Sorting
*** bubble Sorting
*** Selection Sorting
- What is selection sorting \\
  The selection sort is an algorithm, specifically an in-place
  comparison sort. It has O(n2) time complexity, making it inefficient
  on large lists, and generally performs worse than the similar
  insertion sort.  Selection sort is noted for its simplicity, and it
  has performance advantages over more complicated algorithms in
  certain situations, particularly where auxiliary memory is limited.
- Visible Demonstration:
- Algorithm
  #+begin_src python

    def selection_sort(arr):
        n = len(arr)

        for i in range(n-1):
            minj = i

            for j in range(i+1, n):
                if arr[j] < arr[minj]:
                    minj = j

            if minj != i:
                arr[i], arr[minj] = arr[minj], arr[i]

        return arr 
  #+end_src
